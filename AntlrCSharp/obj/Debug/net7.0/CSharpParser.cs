//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dwini\Desktop\Test2\AntlrCSharp\CSharp.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrCSharp {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CSharpParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, IDENTIFIER=29, LITERAL=30, WS=31;
	public const int
		RULE_compilationUnit = 0, RULE_usingDirective = 1, RULE_globalAttribute = 2, 
		RULE_namespaceDeclaration = 3, RULE_typeDeclaration = 4, RULE_classDeclaration = 5, 
		RULE_interfaceDeclaration = 6, RULE_structDeclaration = 7, RULE_enumDeclaration = 8, 
		RULE_baseList = 9, RULE_classBody = 10, RULE_interfaceBody = 11, RULE_structBody = 12, 
		RULE_enumBody = 13, RULE_classMemberDeclaration = 14, RULE_interfaceMemberDeclaration = 15, 
		RULE_structMemberDeclaration = 16, RULE_methodDeclaration = 17, RULE_fieldDeclaration = 18, 
		RULE_enumMember = 19, RULE_returnType = 20, RULE_type = 21, RULE_qualifiedIdentifier = 22, 
		RULE_typeParameterList = 23, RULE_parameterList = 24, RULE_parameter = 25, 
		RULE_block = 26, RULE_statement = 27, RULE_localVariableDeclaration = 28, 
		RULE_expressionStatement = 29, RULE_returnStatement = 30, RULE_expression = 31, 
		RULE_assignmentExpression = 32, RULE_additiveExpression = 33, RULE_multiplicativeExpression = 34, 
		RULE_primaryExpression = 35, RULE_attributeList = 36, RULE_attribute = 37, 
		RULE_attributeArgumentList = 38, RULE_attributeArgument = 39;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingDirective", "globalAttribute", "namespaceDeclaration", 
		"typeDeclaration", "classDeclaration", "interfaceDeclaration", "structDeclaration", 
		"enumDeclaration", "baseList", "classBody", "interfaceBody", "structBody", 
		"enumBody", "classMemberDeclaration", "interfaceMemberDeclaration", "structMemberDeclaration", 
		"methodDeclaration", "fieldDeclaration", "enumMember", "returnType", "type", 
		"qualifiedIdentifier", "typeParameterList", "parameterList", "parameter", 
		"block", "statement", "localVariableDeclaration", "expressionStatement", 
		"returnStatement", "expression", "assignmentExpression", "additiveExpression", 
		"multiplicativeExpression", "primaryExpression", "attributeList", "attribute", 
		"attributeArgumentList", "attributeArgument"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'.'", "';'", "'static'", "'['", "'assembly'", "':'", 
		"']'", "'namespace'", "'{'", "'}'", "'class'", "'<'", "'>'", "'base'", 
		"'interface'", "'struct'", "'enum'", "','", "'('", "')'", "'='", "'void'", 
		"'return'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "IDENTIFIER", "LITERAL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSharpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CSharpParser.Eof, 0); }
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public GlobalAttributeContext[] globalAttribute() {
			return GetRuleContexts<GlobalAttributeContext>();
		}
		public GlobalAttributeContext globalAttribute(int i) {
			return GetRuleContext<GlobalAttributeContext>(i);
		}
		public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__8) | (1L << T__11) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) {
				{
				State = 84;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__0:
					{
					State = 80; usingDirective();
					}
					break;
				case T__4:
					{
					State = 81; globalAttribute();
					}
					break;
				case T__8:
					{
					State = 82; namespaceDeclaration();
					}
					break;
				case T__11:
				case T__15:
				case T__16:
				case T__17:
					{
					State = 83; typeDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 88;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 89; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpParser.IDENTIFIER, i);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(T__0);
			State = 111;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				{
				State = 92; Match(IDENTIFIER);
				State = 97;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__1) {
					{
					{
					State = 93; Match(T__1);
					State = 94; Match(IDENTIFIER);
					}
					}
					State = 99;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 100; Match(T__2);
				}
				break;
			case T__3:
				{
				State = 101; Match(T__3);
				State = 102; Match(IDENTIFIER);
				State = 107;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__1) {
					{
					{
					State = 103; Match(T__1);
					State = 104; Match(IDENTIFIER);
					}
					}
					State = 109;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 110; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributeContext : ParserRuleContext {
		public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		public GlobalAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributeContext globalAttribute() {
		GlobalAttributeContext _localctx = new GlobalAttributeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_globalAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(T__4);
			State = 114; Match(T__5);
			State = 115; Match(T__6);
			State = 116; attributeList();
			State = 117; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(T__8);
			State = 120; qualifiedIdentifier();
			State = 121; Match(T__9);
			State = 126;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__11) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) {
				{
				State = 124;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__0:
					{
					State = 122; usingDirective();
					}
					break;
				case T__11:
				case T__15:
				case T__16:
				case T__17:
					{
					State = 123; typeDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 128;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 129; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_typeDeclaration);
		try {
			State = 135;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; classDeclaration();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; interfaceDeclaration();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133; structDeclaration();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134; enumDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public BaseListContext baseList() {
			return GetRuleContext<BaseListContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(T__11);
			State = 138; Match(IDENTIFIER);
			State = 143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__12) {
				{
				State = 139; Match(T__12);
				State = 140; typeParameterList();
				State = 141; Match(T__13);
				}
			}

			State = 147;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__14) {
				{
				State = 145; Match(T__14);
				State = 146; baseList();
				}
			}

			State = 149; Match(T__9);
			State = 150; classBody();
			State = 151; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public BaseListContext baseList() {
			return GetRuleContext<BaseListContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(T__15);
			State = 154; Match(IDENTIFIER);
			State = 159;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__12) {
				{
				State = 155; Match(T__12);
				State = 156; typeParameterList();
				State = 157; Match(T__13);
				}
			}

			State = 163;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__14) {
				{
				State = 161; Match(T__14);
				State = 162; baseList();
				}
			}

			State = 165; Match(T__9);
			State = 166; interfaceBody();
			State = 167; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public BaseListContext baseList() {
			return GetRuleContext<BaseListContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(T__16);
			State = 170; Match(IDENTIFIER);
			State = 175;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__12) {
				{
				State = 171; Match(T__12);
				State = 172; typeParameterList();
				State = 173; Match(T__13);
				}
			}

			State = 179;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__14) {
				{
				State = 177; Match(T__14);
				State = 178; baseList();
				}
			}

			State = 181; Match(T__9);
			State = 182; structBody();
			State = 183; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_enumDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(T__17);
			State = 186; Match(IDENTIFIER);
			State = 187; Match(T__9);
			State = 188; enumBody();
			State = 189; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseListContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public BaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterBaseList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitBaseList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseListContext baseList() {
		BaseListContext _localctx = new BaseListContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_baseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(T__6);
			State = 192; type();
			State = 197;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__18) {
				{
				{
				State = 193; Match(T__18);
				State = 194; type();
				}
				}
				State = 199;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__22 || _la==IDENTIFIER) {
				{
				{
				State = 200; classMemberDeclaration();
				}
				}
				State = 205;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public InterfaceMemberDeclarationContext[] interfaceMemberDeclaration() {
			return GetRuleContexts<InterfaceMemberDeclarationContext>();
		}
		public InterfaceMemberDeclarationContext interfaceMemberDeclaration(int i) {
			return GetRuleContext<InterfaceMemberDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__22 || _la==IDENTIFIER) {
				{
				{
				State = 206; interfaceMemberDeclaration();
				}
				}
				State = 211;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : ParserRuleContext {
		public StructMemberDeclarationContext[] structMemberDeclaration() {
			return GetRuleContexts<StructMemberDeclarationContext>();
		}
		public StructMemberDeclarationContext structMemberDeclaration(int i) {
			return GetRuleContext<StructMemberDeclarationContext>(i);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterStructBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitStructBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructBodyContext structBody() {
		StructBodyContext _localctx = new StructBodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_structBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__22 || _la==IDENTIFIER) {
				{
				{
				State = 212; structMemberDeclaration();
				}
				}
				State = 217;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; enumMember();
			State = 223;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__18) {
				{
				{
				State = 219; Match(T__18);
				State = 220; enumMember();
				}
				}
				State = 225;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_classMemberDeclaration);
		try {
			State = 228;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226; methodDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227; fieldDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_interfaceMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; methodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public StructMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterStructMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitStructMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructMemberDeclarationContext structMemberDeclaration() {
		StructMemberDeclarationContext _localctx = new StructMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_structMemberDeclaration);
		try {
			State = 234;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; methodDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; fieldDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; returnType();
			State = 237; Match(IDENTIFIER);
			State = 238; Match(T__19);
			State = 240;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 239; parameterList();
				}
			}

			State = 242; Match(T__20);
			State = 243; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; type();
			State = 246; Match(IDENTIFIER);
			State = 249;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__21) {
				{
				State = 247; Match(T__21);
				State = 248; expression();
				}
			}

			State = 251; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_enumMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(IDENTIFIER);
			State = 256;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__21) {
				{
				State = 254; Match(T__21);
				State = 255; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_returnType);
		try {
			State = 260;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; type();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; Match(T__22);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpParser.IDENTIFIER, i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_qualifiedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(IDENTIFIER);
			State = 269;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 265; Match(T__1);
				State = 266; Match(IDENTIFIER);
				}
				}
				State = 271;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpParser.IDENTIFIER, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(IDENTIFIER);
			State = 277;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__18) {
				{
				{
				State = 273; Match(T__18);
				State = 274; Match(IDENTIFIER);
				}
				}
				State = 279;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; parameter();
			State = 285;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__18) {
				{
				{
				State = 281; Match(T__18);
				State = 282; parameter();
				}
				}
				State = 287;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; type();
			State = 289; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; Match(T__9);
			State = 295;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__23) | (1L << IDENTIFIER) | (1L << LITERAL))) != 0)) {
				{
				{
				State = 292; statement();
				}
				}
				State = 297;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 298; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_statement);
		try {
			State = 303;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300; localVariableDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301; expressionStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 302; returnStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; type();
			State = 306; Match(IDENTIFIER);
			State = 309;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__21) {
				{
				State = 307; Match(T__21);
				State = 308; expression();
				}
			}

			State = 311; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; expression();
			State = 314; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(T__23);
			State = 318;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << IDENTIFIER) | (1L << LITERAL))) != 0)) {
				{
				State = 317; expression();
				}
			}

			State = 320; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_assignmentExpression);
		try {
			State = 328;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; Match(IDENTIFIER);
				State = 325; Match(T__21);
				State = 326; expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 327; additiveExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; multiplicativeExpression();
			State = 335;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__24 || _la==T__25) {
				{
				{
				State = 331;
				_la = _input.La(1);
				if ( !(_la==T__24 || _la==T__25) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 332; multiplicativeExpression();
				}
				}
				State = 337;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext[] primaryExpression() {
			return GetRuleContexts<PrimaryExpressionContext>();
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return GetRuleContext<PrimaryExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; primaryExpression();
			State = 343;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__26 || _la==T__27) {
				{
				{
				State = 339;
				_la = _input.La(1);
				if ( !(_la==T__26 || _la==T__27) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 340; primaryExpression();
				}
				}
				State = 345;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ITerminalNode LITERAL() { return GetToken(CSharpParser.LITERAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_primaryExpression);
		try {
			State = 352;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 346; Match(IDENTIFIER);
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347; Match(LITERAL);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 3);
				{
				State = 348; Match(T__19);
				State = 349; expression();
				State = 350; Match(T__20);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeListContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAttributeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeListContext attributeList() {
		AttributeListContext _localctx = new AttributeListContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_attributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; attribute();
			State = 359;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__18) {
				{
				{
				State = 355; Match(T__18);
				State = 356; attribute();
				}
				}
				State = 361;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public AttributeArgumentListContext attributeArgumentList() {
			return GetRuleContext<AttributeArgumentListContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(T__4);
			State = 365;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 363; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 364; qualifiedIdentifier();
				}
				break;
			}
			State = 369;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 367; Match(T__6);
				State = 368; attributeArgumentList();
				}
			}

			State = 371; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeArgumentListContext : ParserRuleContext {
		public AttributeArgumentContext[] attributeArgument() {
			return GetRuleContexts<AttributeArgumentContext>();
		}
		public AttributeArgumentContext attributeArgument(int i) {
			return GetRuleContext<AttributeArgumentContext>(i);
		}
		public AttributeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAttributeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAttributeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeArgumentListContext attributeArgumentList() {
		AttributeArgumentListContext _localctx = new AttributeArgumentListContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_attributeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; attributeArgument();
			State = 378;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__18) {
				{
				{
				State = 374; Match(T__18);
				State = 375; attributeArgument();
				}
				}
				State = 380;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeArgumentContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpParser.IDENTIFIER, i);
		}
		public ITerminalNode LITERAL() { return GetToken(CSharpParser.LITERAL, 0); }
		public AttributeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAttributeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAttributeArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeArgumentContext attributeArgument() {
		AttributeArgumentContext _localctx = new AttributeArgumentContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_attributeArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(IDENTIFIER);
			State = 382; Match(T__21);
			State = 383;
			_la = _input.La(1);
			if ( !(_la==IDENTIFIER || _la==LITERAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3!\x184\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\a\x2W\n\x2\f\x2\xE\x2Z\v\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\a\x3\x62\n\x3\f\x3\xE\x3\x65\v\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\a\x3l\n\x3\f\x3\xE\x3o\v\x3\x3\x3\x5\x3r\n\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\x7F\n\x5\f\x5\xE"+
		"\x5\x82\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x8A\n\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x5\a\x92\n\a\x3\a\x3\a\x5\a\x96\n\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xA2\n\b\x3\b\x3\b\x5\b\xA6"+
		"\n\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xB2\n\t\x3"+
		"\t\x3\t\x5\t\xB6\n\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\v\x3\v\x3\v\x3\v\a\v\xC6\n\v\f\v\xE\v\xC9\v\v\x3\f\a\f\xCC\n\f\f\f"+
		"\xE\f\xCF\v\f\x3\r\a\r\xD2\n\r\f\r\xE\r\xD5\v\r\x3\xE\a\xE\xD8\n\xE\f"+
		"\xE\xE\xE\xDB\v\xE\x3\xF\x3\xF\x3\xF\a\xF\xE0\n\xF\f\xF\xE\xF\xE3\v\xF"+
		"\x3\x10\x3\x10\x5\x10\xE7\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x5\x12\xED"+
		"\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xF3\n\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xFC\n\x14\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x15\x5\x15\x103\n\x15\x3\x16\x3\x16\x5\x16\x107\n\x16\x3\x17\x3"+
		"\x17\x3\x18\x3\x18\x3\x18\a\x18\x10E\n\x18\f\x18\xE\x18\x111\v\x18\x3"+
		"\x19\x3\x19\x3\x19\a\x19\x116\n\x19\f\x19\xE\x19\x119\v\x19\x3\x1A\x3"+
		"\x1A\x3\x1A\a\x1A\x11E\n\x1A\f\x1A\xE\x1A\x121\v\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\a\x1C\x128\n\x1C\f\x1C\xE\x1C\x12B\v\x1C\x3\x1C\x3"+
		"\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x132\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x5\x1E\x138\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x5 \x141"+
		"\n \x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3\"\x5\"\x14B\n\"\x3#\x3#\x3#\a#\x150"+
		"\n#\f#\xE#\x153\v#\x3$\x3$\x3$\a$\x158\n$\f$\xE$\x15B\v$\x3%\x3%\x3%\x3"+
		"%\x3%\x3%\x5%\x163\n%\x3&\x3&\x3&\a&\x168\n&\f&\xE&\x16B\v&\x3\'\x3\'"+
		"\x3\'\x5\'\x170\n\'\x3\'\x3\'\x5\'\x174\n\'\x3\'\x3\'\x3(\x3(\x3(\a(\x17B"+
		"\n(\f(\xE(\x17E\v(\x3)\x3)\x3)\x3)\x3)\x2\x2\x2*\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2\x2\x5\x3\x2"+
		"\x1B\x1C\x3\x2\x1D\x1E\x3\x2\x1F \x189\x2X\x3\x2\x2\x2\x4]\x3\x2\x2\x2"+
		"\x6s\x3\x2\x2\x2\by\x3\x2\x2\x2\n\x89\x3\x2\x2\x2\f\x8B\x3\x2\x2\x2\xE"+
		"\x9B\x3\x2\x2\x2\x10\xAB\x3\x2\x2\x2\x12\xBB\x3\x2\x2\x2\x14\xC1\x3\x2"+
		"\x2\x2\x16\xCD\x3\x2\x2\x2\x18\xD3\x3\x2\x2\x2\x1A\xD9\x3\x2\x2\x2\x1C"+
		"\xDC\x3\x2\x2\x2\x1E\xE6\x3\x2\x2\x2 \xE8\x3\x2\x2\x2\"\xEC\x3\x2\x2\x2"+
		"$\xEE\x3\x2\x2\x2&\xF7\x3\x2\x2\x2(\xFF\x3\x2\x2\x2*\x106\x3\x2\x2\x2"+
		",\x108\x3\x2\x2\x2.\x10A\x3\x2\x2\x2\x30\x112\x3\x2\x2\x2\x32\x11A\x3"+
		"\x2\x2\x2\x34\x122\x3\x2\x2\x2\x36\x125\x3\x2\x2\x2\x38\x131\x3\x2\x2"+
		"\x2:\x133\x3\x2\x2\x2<\x13B\x3\x2\x2\x2>\x13E\x3\x2\x2\x2@\x144\x3\x2"+
		"\x2\x2\x42\x14A\x3\x2\x2\x2\x44\x14C\x3\x2\x2\x2\x46\x154\x3\x2\x2\x2"+
		"H\x162\x3\x2\x2\x2J\x164\x3\x2\x2\x2L\x16C\x3\x2\x2\x2N\x177\x3\x2\x2"+
		"\x2P\x17F\x3\x2\x2\x2RW\x5\x4\x3\x2SW\x5\x6\x4\x2TW\x5\b\x5\x2UW\x5\n"+
		"\x6\x2VR\x3\x2\x2\x2VS\x3\x2\x2\x2VT\x3\x2\x2\x2VU\x3\x2\x2\x2WZ\x3\x2"+
		"\x2\x2XV\x3\x2\x2\x2XY\x3\x2\x2\x2Y[\x3\x2\x2\x2ZX\x3\x2\x2\x2[\\\a\x2"+
		"\x2\x3\\\x3\x3\x2\x2\x2]q\a\x3\x2\x2^\x63\a\x1F\x2\x2_`\a\x4\x2\x2`\x62"+
		"\a\x1F\x2\x2\x61_\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2"+
		"\x63\x64\x3\x2\x2\x2\x64\x66\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66r\a\x5"+
		"\x2\x2gh\a\x6\x2\x2hm\a\x1F\x2\x2ij\a\x4\x2\x2jl\a\x1F\x2\x2ki\x3\x2\x2"+
		"\x2lo\x3\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2\x2\x2np\x3\x2\x2\x2om\x3\x2\x2"+
		"\x2pr\a\x5\x2\x2q^\x3\x2\x2\x2qg\x3\x2\x2\x2r\x5\x3\x2\x2\x2st\a\a\x2"+
		"\x2tu\a\b\x2\x2uv\a\t\x2\x2vw\x5J&\x2wx\a\n\x2\x2x\a\x3\x2\x2\x2yz\a\v"+
		"\x2\x2z{\x5.\x18\x2{\x80\a\f\x2\x2|\x7F\x5\x4\x3\x2}\x7F\x5\n\x6\x2~|"+
		"\x3\x2\x2\x2~}\x3\x2\x2\x2\x7F\x82\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80\x81"+
		"\x3\x2\x2\x2\x81\x83\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x83\x84\a\r\x2\x2"+
		"\x84\t\x3\x2\x2\x2\x85\x8A\x5\f\a\x2\x86\x8A\x5\xE\b\x2\x87\x8A\x5\x10"+
		"\t\x2\x88\x8A\x5\x12\n\x2\x89\x85\x3\x2\x2\x2\x89\x86\x3\x2\x2\x2\x89"+
		"\x87\x3\x2\x2\x2\x89\x88\x3\x2\x2\x2\x8A\v\x3\x2\x2\x2\x8B\x8C\a\xE\x2"+
		"\x2\x8C\x91\a\x1F\x2\x2\x8D\x8E\a\xF\x2\x2\x8E\x8F\x5\x30\x19\x2\x8F\x90"+
		"\a\x10\x2\x2\x90\x92\x3\x2\x2\x2\x91\x8D\x3\x2\x2\x2\x91\x92\x3\x2\x2"+
		"\x2\x92\x95\x3\x2\x2\x2\x93\x94\a\x11\x2\x2\x94\x96\x5\x14\v\x2\x95\x93"+
		"\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x98\a\f\x2\x2"+
		"\x98\x99\x5\x16\f\x2\x99\x9A\a\r\x2\x2\x9A\r\x3\x2\x2\x2\x9B\x9C\a\x12"+
		"\x2\x2\x9C\xA1\a\x1F\x2\x2\x9D\x9E\a\xF\x2\x2\x9E\x9F\x5\x30\x19\x2\x9F"+
		"\xA0\a\x10\x2\x2\xA0\xA2\x3\x2\x2\x2\xA1\x9D\x3\x2\x2\x2\xA1\xA2\x3\x2"+
		"\x2\x2\xA2\xA5\x3\x2\x2\x2\xA3\xA4\a\x11\x2\x2\xA4\xA6\x5\x14\v\x2\xA5"+
		"\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA8\a\f\x2"+
		"\x2\xA8\xA9\x5\x18\r\x2\xA9\xAA\a\r\x2\x2\xAA\xF\x3\x2\x2\x2\xAB\xAC\a"+
		"\x13\x2\x2\xAC\xB1\a\x1F\x2\x2\xAD\xAE\a\xF\x2\x2\xAE\xAF\x5\x30\x19\x2"+
		"\xAF\xB0\a\x10\x2\x2\xB0\xB2\x3\x2\x2\x2\xB1\xAD\x3\x2\x2\x2\xB1\xB2\x3"+
		"\x2\x2\x2\xB2\xB5\x3\x2\x2\x2\xB3\xB4\a\x11\x2\x2\xB4\xB6\x5\x14\v\x2"+
		"\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB8\a"+
		"\f\x2\x2\xB8\xB9\x5\x1A\xE\x2\xB9\xBA\a\r\x2\x2\xBA\x11\x3\x2\x2\x2\xBB"+
		"\xBC\a\x14\x2\x2\xBC\xBD\a\x1F\x2\x2\xBD\xBE\a\f\x2\x2\xBE\xBF\x5\x1C"+
		"\xF\x2\xBF\xC0\a\r\x2\x2\xC0\x13\x3\x2\x2\x2\xC1\xC2\a\t\x2\x2\xC2\xC7"+
		"\x5,\x17\x2\xC3\xC4\a\x15\x2\x2\xC4\xC6\x5,\x17\x2\xC5\xC3\x3\x2\x2\x2"+
		"\xC6\xC9\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\x15\x3"+
		"\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA\xCC\x5\x1E\x10\x2\xCB\xCA\x3\x2\x2\x2"+
		"\xCC\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\x17\x3"+
		"\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD2\x5 \x11\x2\xD1\xD0\x3\x2\x2\x2\xD2"+
		"\xD5\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\x19\x3\x2"+
		"\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6\xD8\x5\"\x12\x2\xD7\xD6\x3\x2\x2\x2\xD8"+
		"\xDB\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\x1B\x3\x2"+
		"\x2\x2\xDB\xD9\x3\x2\x2\x2\xDC\xE1\x5(\x15\x2\xDD\xDE\a\x15\x2\x2\xDE"+
		"\xE0\x5(\x15\x2\xDF\xDD\x3\x2\x2\x2\xE0\xE3\x3\x2\x2\x2\xE1\xDF\x3\x2"+
		"\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\x1D\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4"+
		"\xE7\x5$\x13\x2\xE5\xE7\x5&\x14\x2\xE6\xE4\x3\x2\x2\x2\xE6\xE5\x3\x2\x2"+
		"\x2\xE7\x1F\x3\x2\x2\x2\xE8\xE9\x5$\x13\x2\xE9!\x3\x2\x2\x2\xEA\xED\x5"+
		"$\x13\x2\xEB\xED\x5&\x14\x2\xEC\xEA\x3\x2\x2\x2\xEC\xEB\x3\x2\x2\x2\xED"+
		"#\x3\x2\x2\x2\xEE\xEF\x5*\x16\x2\xEF\xF0\a\x1F\x2\x2\xF0\xF2\a\x16\x2"+
		"\x2\xF1\xF3\x5\x32\x1A\x2\xF2\xF1\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3"+
		"\xF4\x3\x2\x2\x2\xF4\xF5\a\x17\x2\x2\xF5\xF6\x5\x36\x1C\x2\xF6%\x3\x2"+
		"\x2\x2\xF7\xF8\x5,\x17\x2\xF8\xFB\a\x1F\x2\x2\xF9\xFA\a\x18\x2\x2\xFA"+
		"\xFC\x5@!\x2\xFB\xF9\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFD\x3\x2\x2"+
		"\x2\xFD\xFE\a\x5\x2\x2\xFE\'\x3\x2\x2\x2\xFF\x102\a\x1F\x2\x2\x100\x101"+
		"\a\x18\x2\x2\x101\x103\x5@!\x2\x102\x100\x3\x2\x2\x2\x102\x103\x3\x2\x2"+
		"\x2\x103)\x3\x2\x2\x2\x104\x107\x5,\x17\x2\x105\x107\a\x19\x2\x2\x106"+
		"\x104\x3\x2\x2\x2\x106\x105\x3\x2\x2\x2\x107+\x3\x2\x2\x2\x108\x109\x5"+
		".\x18\x2\x109-\x3\x2\x2\x2\x10A\x10F\a\x1F\x2\x2\x10B\x10C\a\x4\x2\x2"+
		"\x10C\x10E\a\x1F\x2\x2\x10D\x10B\x3\x2\x2\x2\x10E\x111\x3\x2\x2\x2\x10F"+
		"\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110/\x3\x2\x2\x2\x111\x10F\x3"+
		"\x2\x2\x2\x112\x117\a\x1F\x2\x2\x113\x114\a\x15\x2\x2\x114\x116\a\x1F"+
		"\x2\x2\x115\x113\x3\x2\x2\x2\x116\x119\x3\x2\x2\x2\x117\x115\x3\x2\x2"+
		"\x2\x117\x118\x3\x2\x2\x2\x118\x31\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x11A"+
		"\x11F\x5\x34\x1B\x2\x11B\x11C\a\x15\x2\x2\x11C\x11E\x5\x34\x1B\x2\x11D"+
		"\x11B\x3\x2\x2\x2\x11E\x121\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x11F\x120"+
		"\x3\x2\x2\x2\x120\x33\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x122\x123\x5,"+
		"\x17\x2\x123\x124\a\x1F\x2\x2\x124\x35\x3\x2\x2\x2\x125\x129\a\f\x2\x2"+
		"\x126\x128\x5\x38\x1D\x2\x127\x126\x3\x2\x2\x2\x128\x12B\x3\x2\x2\x2\x129"+
		"\x127\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x12C\x3\x2\x2\x2\x12B\x129"+
		"\x3\x2\x2\x2\x12C\x12D\a\r\x2\x2\x12D\x37\x3\x2\x2\x2\x12E\x132\x5:\x1E"+
		"\x2\x12F\x132\x5<\x1F\x2\x130\x132\x5> \x2\x131\x12E\x3\x2\x2\x2\x131"+
		"\x12F\x3\x2\x2\x2\x131\x130\x3\x2\x2\x2\x132\x39\x3\x2\x2\x2\x133\x134"+
		"\x5,\x17\x2\x134\x137\a\x1F\x2\x2\x135\x136\a\x18\x2\x2\x136\x138\x5@"+
		"!\x2\x137\x135\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2"+
		"\x139\x13A\a\x5\x2\x2\x13A;\x3\x2\x2\x2\x13B\x13C\x5@!\x2\x13C\x13D\a"+
		"\x5\x2\x2\x13D=\x3\x2\x2\x2\x13E\x140\a\x1A\x2\x2\x13F\x141\x5@!\x2\x140"+
		"\x13F\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x143"+
		"\a\x5\x2\x2\x143?\x3\x2\x2\x2\x144\x145\x5\x42\"\x2\x145\x41\x3\x2\x2"+
		"\x2\x146\x147\a\x1F\x2\x2\x147\x148\a\x18\x2\x2\x148\x14B\x5@!\x2\x149"+
		"\x14B\x5\x44#\x2\x14A\x146\x3\x2\x2\x2\x14A\x149\x3\x2\x2\x2\x14B\x43"+
		"\x3\x2\x2\x2\x14C\x151\x5\x46$\x2\x14D\x14E\t\x2\x2\x2\x14E\x150\x5\x46"+
		"$\x2\x14F\x14D\x3\x2\x2\x2\x150\x153\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2"+
		"\x151\x152\x3\x2\x2\x2\x152\x45\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2\x154"+
		"\x159\x5H%\x2\x155\x156\t\x3\x2\x2\x156\x158\x5H%\x2\x157\x155\x3\x2\x2"+
		"\x2\x158\x15B\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2"+
		"\x15AG\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15C\x163\a\x1F\x2\x2\x15D\x163"+
		"\a \x2\x2\x15E\x15F\a\x16\x2\x2\x15F\x160\x5@!\x2\x160\x161\a\x17\x2\x2"+
		"\x161\x163\x3\x2\x2\x2\x162\x15C\x3\x2\x2\x2\x162\x15D\x3\x2\x2\x2\x162"+
		"\x15E\x3\x2\x2\x2\x163I\x3\x2\x2\x2\x164\x169\x5L\'\x2\x165\x166\a\x15"+
		"\x2\x2\x166\x168\x5L\'\x2\x167\x165\x3\x2\x2\x2\x168\x16B\x3\x2\x2\x2"+
		"\x169\x167\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16AK\x3\x2\x2\x2\x16B\x169"+
		"\x3\x2\x2\x2\x16C\x16F\a\a\x2\x2\x16D\x170\a\x1F\x2\x2\x16E\x170\x5.\x18"+
		"\x2\x16F\x16D\x3\x2\x2\x2\x16F\x16E\x3\x2\x2\x2\x170\x173\x3\x2\x2\x2"+
		"\x171\x172\a\t\x2\x2\x172\x174\x5N(\x2\x173\x171\x3\x2\x2\x2\x173\x174"+
		"\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x176\a\n\x2\x2\x176M\x3\x2\x2"+
		"\x2\x177\x17C\x5P)\x2\x178\x179\a\x15\x2\x2\x179\x17B\x5P)\x2\x17A\x178"+
		"\x3\x2\x2\x2\x17B\x17E\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17C\x17D\x3"+
		"\x2\x2\x2\x17DO\x3\x2\x2\x2\x17E\x17C\x3\x2\x2\x2\x17F\x180\a\x1F\x2\x2"+
		"\x180\x181\a\x18\x2\x2\x181\x182\t\x4\x2\x2\x182Q\x3\x2\x2\x2*VX\x63m"+
		"q~\x80\x89\x91\x95\xA1\xA5\xB1\xB5\xC7\xCD\xD3\xD9\xE1\xE6\xEC\xF2\xFB"+
		"\x102\x106\x10F\x117\x11F\x129\x131\x137\x140\x14A\x151\x159\x162\x169"+
		"\x16F\x173\x17C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AntlrCSharp
