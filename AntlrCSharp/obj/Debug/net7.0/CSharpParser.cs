//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dwini\Desktop\Test2\AntlrCSharp\CSharp.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrCSharp {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CSharpParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, IDENTIFIER=30, LITERAL=31, 
		WS=32;
	public const int
		RULE_compilationUnit = 0, RULE_usingDirective = 1, RULE_globalAttribute = 2, 
		RULE_namespaceDeclaration = 3, RULE_typeDeclaration = 4, RULE_classDeclaration = 5, 
		RULE_interfaceDeclaration = 6, RULE_structDeclaration = 7, RULE_enumDeclaration = 8, 
		RULE_baseList = 9, RULE_classBody = 10, RULE_interfaceBody = 11, RULE_structBody = 12, 
		RULE_enumBody = 13, RULE_classMemberDeclaration = 14, RULE_interfaceMemberDeclaration = 15, 
		RULE_structMemberDeclaration = 16, RULE_methodDeclaration = 17, RULE_modifiers = 18, 
		RULE_fieldDeclaration = 19, RULE_enumMember = 20, RULE_returnType = 21, 
		RULE_type = 22, RULE_qualifiedIdentifier = 23, RULE_typeParameterList = 24, 
		RULE_parameterList = 25, RULE_parameter = 26, RULE_block = 27, RULE_statement = 28, 
		RULE_localVariableDeclaration = 29, RULE_expressionStatement = 30, RULE_returnStatement = 31, 
		RULE_expression = 32, RULE_assignmentExpression = 33, RULE_additiveExpression = 34, 
		RULE_multiplicativeExpression = 35, RULE_primaryExpression = 36, RULE_attributeList = 37, 
		RULE_attribute = 38, RULE_attributeArgumentList = 39, RULE_attributeArgument = 40;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingDirective", "globalAttribute", "namespaceDeclaration", 
		"typeDeclaration", "classDeclaration", "interfaceDeclaration", "structDeclaration", 
		"enumDeclaration", "baseList", "classBody", "interfaceBody", "structBody", 
		"enumBody", "classMemberDeclaration", "interfaceMemberDeclaration", "structMemberDeclaration", 
		"methodDeclaration", "modifiers", "fieldDeclaration", "enumMember", "returnType", 
		"type", "qualifiedIdentifier", "typeParameterList", "parameterList", "parameter", 
		"block", "statement", "localVariableDeclaration", "expressionStatement", 
		"returnStatement", "expression", "assignmentExpression", "additiveExpression", 
		"multiplicativeExpression", "primaryExpression", "attributeList", "attribute", 
		"attributeArgumentList", "attributeArgument"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'.'", "';'", "'static'", "'['", "'assembly'", "':'", 
		"']'", "'namespace'", "'{'", "'}'", "'partial'", "'class'", "'<'", "'>'", 
		"'base'", "'interface'", "'struct'", "'enum'", "','", "'('", "')'", "'='", 
		"'void'", "'return'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "IDENTIFIER", "LITERAL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSharpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CSharpParser.Eof, 0); }
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public GlobalAttributeContext[] globalAttribute() {
			return GetRuleContexts<GlobalAttributeContext>();
		}
		public GlobalAttributeContext globalAttribute(int i) {
			return GetRuleContext<GlobalAttributeContext>(i);
		}
		public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__8) | (1L << T__11) | (1L << T__12) | (1L << T__16) | (1L << T__17) | (1L << T__18))) != 0)) {
				{
				State = 86;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__0:
					{
					State = 82; usingDirective();
					}
					break;
				case T__4:
					{
					State = 83; globalAttribute();
					}
					break;
				case T__8:
					{
					State = 84; namespaceDeclaration();
					}
					break;
				case T__11:
				case T__12:
				case T__16:
				case T__17:
				case T__18:
					{
					State = 85; typeDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 90;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 91; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpParser.IDENTIFIER, i);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(T__0);
			State = 113;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				{
				State = 94; Match(IDENTIFIER);
				State = 99;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__1) {
					{
					{
					State = 95; Match(T__1);
					State = 96; Match(IDENTIFIER);
					}
					}
					State = 101;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 102; Match(T__2);
				}
				break;
			case T__3:
				{
				State = 103; Match(T__3);
				State = 104; Match(IDENTIFIER);
				State = 109;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__1) {
					{
					{
					State = 105; Match(T__1);
					State = 106; Match(IDENTIFIER);
					}
					}
					State = 111;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 112; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributeContext : ParserRuleContext {
		public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		public GlobalAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributeContext globalAttribute() {
		GlobalAttributeContext _localctx = new GlobalAttributeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_globalAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(T__4);
			State = 116; Match(T__5);
			State = 117; Match(T__6);
			State = 118; attributeList();
			State = 119; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(T__8);
			State = 122; qualifiedIdentifier();
			State = 123; Match(T__9);
			State = 128;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__11) | (1L << T__12) | (1L << T__16) | (1L << T__17) | (1L << T__18))) != 0)) {
				{
				State = 126;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__0:
					{
					State = 124; usingDirective();
					}
					break;
				case T__11:
				case T__12:
				case T__16:
				case T__17:
				case T__18:
					{
					State = 125; typeDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 130;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 131; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_typeDeclaration);
		try {
			State = 137;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__11:
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133; classDeclaration();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134; interfaceDeclaration();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 135; structDeclaration();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 4);
				{
				State = 136; enumDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public BaseListContext baseList() {
			return GetRuleContext<BaseListContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__11) {
				{
				State = 139; Match(T__11);
				}
			}

			State = 142; Match(T__12);
			State = 143; Match(IDENTIFIER);
			State = 148;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__13) {
				{
				State = 144; Match(T__13);
				State = 145; typeParameterList();
				State = 146; Match(T__14);
				}
			}

			State = 152;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__15) {
				{
				State = 150; Match(T__15);
				State = 151; baseList();
				}
			}

			State = 154; Match(T__9);
			State = 155; classBody();
			State = 156; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public BaseListContext baseList() {
			return GetRuleContext<BaseListContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(T__16);
			State = 159; Match(IDENTIFIER);
			State = 164;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__13) {
				{
				State = 160; Match(T__13);
				State = 161; typeParameterList();
				State = 162; Match(T__14);
				}
			}

			State = 168;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__15) {
				{
				State = 166; Match(T__15);
				State = 167; baseList();
				}
			}

			State = 170; Match(T__9);
			State = 171; interfaceBody();
			State = 172; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public BaseListContext baseList() {
			return GetRuleContext<BaseListContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(T__17);
			State = 175; Match(IDENTIFIER);
			State = 180;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__13) {
				{
				State = 176; Match(T__13);
				State = 177; typeParameterList();
				State = 178; Match(T__14);
				}
			}

			State = 184;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__15) {
				{
				State = 182; Match(T__15);
				State = 183; baseList();
				}
			}

			State = 186; Match(T__9);
			State = 187; structBody();
			State = 188; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_enumDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(T__18);
			State = 191; Match(IDENTIFIER);
			State = 192; Match(T__9);
			State = 193; enumBody();
			State = 194; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseListContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public BaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterBaseList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitBaseList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseListContext baseList() {
		BaseListContext _localctx = new BaseListContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_baseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(T__6);
			State = 197; type();
			State = 202;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__19) {
				{
				{
				State = 198; Match(T__19);
				State = 199; type();
				}
				}
				State = 204;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__23) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 205; classMemberDeclaration();
				}
				}
				State = 210;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public InterfaceMemberDeclarationContext[] interfaceMemberDeclaration() {
			return GetRuleContexts<InterfaceMemberDeclarationContext>();
		}
		public InterfaceMemberDeclarationContext interfaceMemberDeclaration(int i) {
			return GetRuleContext<InterfaceMemberDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__23) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 211; interfaceMemberDeclaration();
				}
				}
				State = 216;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : ParserRuleContext {
		public StructMemberDeclarationContext[] structMemberDeclaration() {
			return GetRuleContexts<StructMemberDeclarationContext>();
		}
		public StructMemberDeclarationContext structMemberDeclaration(int i) {
			return GetRuleContext<StructMemberDeclarationContext>(i);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterStructBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitStructBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructBodyContext structBody() {
		StructBodyContext _localctx = new StructBodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_structBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__23) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 217; structMemberDeclaration();
				}
				}
				State = 222;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; enumMember();
			State = 228;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__19) {
				{
				{
				State = 224; Match(T__19);
				State = 225; enumMember();
				}
				}
				State = 230;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_classMemberDeclaration);
		try {
			State = 233;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231; methodDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232; fieldDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_interfaceMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; methodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public StructMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterStructMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitStructMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructMemberDeclarationContext structMemberDeclaration() {
		StructMemberDeclarationContext _localctx = new StructMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_structMemberDeclaration);
		try {
			State = 239;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; methodDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238; fieldDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__3) {
				{
				State = 241; modifiers();
				}
			}

			State = 244; returnType();
			State = 245; Match(IDENTIFIER);
			State = 246; Match(T__20);
			State = 248;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 247; parameterList();
				}
			}

			State = 250; Match(T__21);
			State = 251; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifiersContext : ParserRuleContext {
		public ModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifiersContext modifiers() {
		ModifiersContext _localctx = new ModifiersContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_modifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; type();
			State = 256; Match(IDENTIFIER);
			State = 259;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__22) {
				{
				State = 257; Match(T__22);
				State = 258; expression();
				}
			}

			State = 261; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_enumMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(IDENTIFIER);
			State = 266;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__22) {
				{
				State = 264; Match(T__22);
				State = 265; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_returnType);
		try {
			State = 270;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; type();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; Match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpParser.IDENTIFIER, i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_qualifiedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(IDENTIFIER);
			State = 279;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 275; Match(T__1);
				State = 276; Match(IDENTIFIER);
				}
				}
				State = 281;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpParser.IDENTIFIER, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(IDENTIFIER);
			State = 287;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__19) {
				{
				{
				State = 283; Match(T__19);
				State = 284; Match(IDENTIFIER);
				}
				}
				State = 289;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; parameter();
			State = 295;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__19) {
				{
				{
				State = 291; Match(T__19);
				State = 292; parameter();
				}
				}
				State = 297;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; type();
			State = 299; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(T__9);
			State = 305;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__24) | (1L << IDENTIFIER) | (1L << LITERAL))) != 0)) {
				{
				{
				State = 302; statement();
				}
				}
				State = 307;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 308; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_statement);
		try {
			State = 313;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 310; localVariableDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 311; expressionStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 312; returnStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; type();
			State = 316; Match(IDENTIFIER);
			State = 319;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__22) {
				{
				State = 317; Match(T__22);
				State = 318; expression();
				}
			}

			State = 321; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; expression();
			State = 324; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(T__24);
			State = 328;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << IDENTIFIER) | (1L << LITERAL))) != 0)) {
				{
				State = 327; expression();
				}
			}

			State = 330; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_assignmentExpression);
		try {
			State = 338;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334; Match(IDENTIFIER);
				State = 335; Match(T__22);
				State = 336; expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337; additiveExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; multiplicativeExpression();
			State = 345;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__25 || _la==T__26) {
				{
				{
				State = 341;
				_la = _input.La(1);
				if ( !(_la==T__25 || _la==T__26) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 342; multiplicativeExpression();
				}
				}
				State = 347;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext[] primaryExpression() {
			return GetRuleContexts<PrimaryExpressionContext>();
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return GetRuleContext<PrimaryExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; primaryExpression();
			State = 353;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__27 || _la==T__28) {
				{
				{
				State = 349;
				_la = _input.La(1);
				if ( !(_la==T__27 || _la==T__28) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 350; primaryExpression();
				}
				}
				State = 355;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ITerminalNode LITERAL() { return GetToken(CSharpParser.LITERAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_primaryExpression);
		try {
			State = 362;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 356; Match(IDENTIFIER);
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357; Match(LITERAL);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 3);
				{
				State = 358; Match(T__20);
				State = 359; expression();
				State = 360; Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeListContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAttributeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeListContext attributeList() {
		AttributeListContext _localctx = new AttributeListContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_attributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(T__4);
			State = 373;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 365; attribute();
				State = 370;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__19) {
					{
					{
					State = 366; Match(T__19);
					State = 367; attribute();
					}
					}
					State = 372;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 375; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpParser.IDENTIFIER, i);
		}
		public AttributeArgumentListContext attributeArgumentList() {
			return GetRuleContext<AttributeArgumentListContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(IDENTIFIER);
			State = 382;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 378; Match(T__1);
				State = 379; Match(IDENTIFIER);
				}
				}
				State = 384;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__20) {
				{
				State = 385; Match(T__20);
				State = 387;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IDENTIFIER) {
					{
					State = 386; attributeArgumentList();
					}
				}

				State = 389; Match(T__21);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeArgumentListContext : ParserRuleContext {
		public AttributeArgumentContext[] attributeArgument() {
			return GetRuleContexts<AttributeArgumentContext>();
		}
		public AttributeArgumentContext attributeArgument(int i) {
			return GetRuleContext<AttributeArgumentContext>(i);
		}
		public AttributeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAttributeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAttributeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeArgumentListContext attributeArgumentList() {
		AttributeArgumentListContext _localctx = new AttributeArgumentListContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_attributeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; attributeArgument();
			State = 397;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__19) {
				{
				{
				State = 393; Match(T__19);
				State = 394; attributeArgument();
				}
				}
				State = 399;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeArgumentContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpParser.IDENTIFIER, i);
		}
		public ITerminalNode LITERAL() { return GetToken(CSharpParser.LITERAL, 0); }
		public AttributeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAttributeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAttributeArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpVisitor<TResult> typedVisitor = visitor as ICSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeArgumentContext attributeArgument() {
		AttributeArgumentContext _localctx = new AttributeArgumentContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_attributeArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(IDENTIFIER);
			State = 401; Match(T__22);
			State = 402;
			_la = _input.La(1);
			if ( !(_la==IDENTIFIER || _la==LITERAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\"\x197\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x3\x2\x3\x2\x3\x2\x3\x2\a\x2Y\n\x2\f\x2\xE\x2\\\v\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\a\x3\x64\n\x3\f\x3\xE\x3g\v\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\a\x3n\n\x3\f\x3\xE\x3q\v\x3\x3\x3\x5\x3t\n\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\x81\n\x5\f"+
		"\x5\xE\x5\x84\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x8C\n\x6"+
		"\x3\a\x5\a\x8F\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x97\n\a\x3\a\x3"+
		"\a\x5\a\x9B\n\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b"+
		"\xA7\n\b\x3\b\x3\b\x5\b\xAB\n\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x5\t\xB7\n\t\x3\t\x3\t\x5\t\xBB\n\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\a\v\xCB\n\v\f\v\xE\v\xCE"+
		"\v\v\x3\f\a\f\xD1\n\f\f\f\xE\f\xD4\v\f\x3\r\a\r\xD7\n\r\f\r\xE\r\xDA\v"+
		"\r\x3\xE\a\xE\xDD\n\xE\f\xE\xE\xE\xE0\v\xE\x3\xF\x3\xF\x3\xF\a\xF\xE5"+
		"\n\xF\f\xF\xE\xF\xE8\v\xF\x3\x10\x3\x10\x5\x10\xEC\n\x10\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x5\x12\xF2\n\x12\x3\x13\x5\x13\xF5\n\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x5\x13\xFB\n\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x5\x15\x106\n\x15\x3\x15\x3\x15\x3\x16\x3\x16"+
		"\x3\x16\x5\x16\x10D\n\x16\x3\x17\x3\x17\x5\x17\x111\n\x17\x3\x18\x3\x18"+
		"\x3\x19\x3\x19\x3\x19\a\x19\x118\n\x19\f\x19\xE\x19\x11B\v\x19\x3\x1A"+
		"\x3\x1A\x3\x1A\a\x1A\x120\n\x1A\f\x1A\xE\x1A\x123\v\x1A\x3\x1B\x3\x1B"+
		"\x3\x1B\a\x1B\x128\n\x1B\f\x1B\xE\x1B\x12B\v\x1B\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1D\x3\x1D\a\x1D\x132\n\x1D\f\x1D\xE\x1D\x135\v\x1D\x3\x1D\x3\x1D"+
		"\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x13C\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5"+
		"\x1F\x142\n\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x3!\x5!\x14B\n!\x3!\x3!"+
		"\x3\"\x3\"\x3#\x3#\x3#\x3#\x5#\x155\n#\x3$\x3$\x3$\a$\x15A\n$\f$\xE$\x15D"+
		"\v$\x3%\x3%\x3%\a%\x162\n%\f%\xE%\x165\v%\x3&\x3&\x3&\x3&\x3&\x3&\x5&"+
		"\x16D\n&\x3\'\x3\'\x3\'\x3\'\a\'\x173\n\'\f\'\xE\'\x176\v\'\x5\'\x178"+
		"\n\'\x3\'\x3\'\x3(\x3(\x3(\a(\x17F\n(\f(\xE(\x182\v(\x3(\x3(\x5(\x186"+
		"\n(\x3(\x5(\x189\n(\x3)\x3)\x3)\a)\x18E\n)\f)\xE)\x191\v)\x3*\x3*\x3*"+
		"\x3*\x3*\x2\x2\x2+\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2"+
		".\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2"+
		"\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2\x2\x5\x3\x2\x1C\x1D\x3\x2\x1E\x1F\x3\x2"+
		" !\x19F\x2Z\x3\x2\x2\x2\x4_\x3\x2\x2\x2\x6u\x3\x2\x2\x2\b{\x3\x2\x2\x2"+
		"\n\x8B\x3\x2\x2\x2\f\x8E\x3\x2\x2\x2\xE\xA0\x3\x2\x2\x2\x10\xB0\x3\x2"+
		"\x2\x2\x12\xC0\x3\x2\x2\x2\x14\xC6\x3\x2\x2\x2\x16\xD2\x3\x2\x2\x2\x18"+
		"\xD8\x3\x2\x2\x2\x1A\xDE\x3\x2\x2\x2\x1C\xE1\x3\x2\x2\x2\x1E\xEB\x3\x2"+
		"\x2\x2 \xED\x3\x2\x2\x2\"\xF1\x3\x2\x2\x2$\xF4\x3\x2\x2\x2&\xFF\x3\x2"+
		"\x2\x2(\x101\x3\x2\x2\x2*\x109\x3\x2\x2\x2,\x110\x3\x2\x2\x2.\x112\x3"+
		"\x2\x2\x2\x30\x114\x3\x2\x2\x2\x32\x11C\x3\x2\x2\x2\x34\x124\x3\x2\x2"+
		"\x2\x36\x12C\x3\x2\x2\x2\x38\x12F\x3\x2\x2\x2:\x13B\x3\x2\x2\x2<\x13D"+
		"\x3\x2\x2\x2>\x145\x3\x2\x2\x2@\x148\x3\x2\x2\x2\x42\x14E\x3\x2\x2\x2"+
		"\x44\x154\x3\x2\x2\x2\x46\x156\x3\x2\x2\x2H\x15E\x3\x2\x2\x2J\x16C\x3"+
		"\x2\x2\x2L\x16E\x3\x2\x2\x2N\x17B\x3\x2\x2\x2P\x18A\x3\x2\x2\x2R\x192"+
		"\x3\x2\x2\x2TY\x5\x4\x3\x2UY\x5\x6\x4\x2VY\x5\b\x5\x2WY\x5\n\x6\x2XT\x3"+
		"\x2\x2\x2XU\x3\x2\x2\x2XV\x3\x2\x2\x2XW\x3\x2\x2\x2Y\\\x3\x2\x2\x2ZX\x3"+
		"\x2\x2\x2Z[\x3\x2\x2\x2[]\x3\x2\x2\x2\\Z\x3\x2\x2\x2]^\a\x2\x2\x3^\x3"+
		"\x3\x2\x2\x2_s\a\x3\x2\x2`\x65\a \x2\x2\x61\x62\a\x4\x2\x2\x62\x64\a "+
		"\x2\x2\x63\x61\x3\x2\x2\x2\x64g\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66"+
		"\x3\x2\x2\x2\x66h\x3\x2\x2\x2g\x65\x3\x2\x2\x2ht\a\x5\x2\x2ij\a\x6\x2"+
		"\x2jo\a \x2\x2kl\a\x4\x2\x2ln\a \x2\x2mk\x3\x2\x2\x2nq\x3\x2\x2\x2om\x3"+
		"\x2\x2\x2op\x3\x2\x2\x2pr\x3\x2\x2\x2qo\x3\x2\x2\x2rt\a\x5\x2\x2s`\x3"+
		"\x2\x2\x2si\x3\x2\x2\x2t\x5\x3\x2\x2\x2uv\a\a\x2\x2vw\a\b\x2\x2wx\a\t"+
		"\x2\x2xy\x5L\'\x2yz\a\n\x2\x2z\a\x3\x2\x2\x2{|\a\v\x2\x2|}\x5\x30\x19"+
		"\x2}\x82\a\f\x2\x2~\x81\x5\x4\x3\x2\x7F\x81\x5\n\x6\x2\x80~\x3\x2\x2\x2"+
		"\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3"+
		"\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\x86\a\r\x2\x2\x86"+
		"\t\x3\x2\x2\x2\x87\x8C\x5\f\a\x2\x88\x8C\x5\xE\b\x2\x89\x8C\x5\x10\t\x2"+
		"\x8A\x8C\x5\x12\n\x2\x8B\x87\x3\x2\x2\x2\x8B\x88\x3\x2\x2\x2\x8B\x89\x3"+
		"\x2\x2\x2\x8B\x8A\x3\x2\x2\x2\x8C\v\x3\x2\x2\x2\x8D\x8F\a\xE\x2\x2\x8E"+
		"\x8D\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x91\a\xF"+
		"\x2\x2\x91\x96\a \x2\x2\x92\x93\a\x10\x2\x2\x93\x94\x5\x32\x1A\x2\x94"+
		"\x95\a\x11\x2\x2\x95\x97\x3\x2\x2\x2\x96\x92\x3\x2\x2\x2\x96\x97\x3\x2"+
		"\x2\x2\x97\x9A\x3\x2\x2\x2\x98\x99\a\x12\x2\x2\x99\x9B\x5\x14\v\x2\x9A"+
		"\x98\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9D\a\f\x2"+
		"\x2\x9D\x9E\x5\x16\f\x2\x9E\x9F\a\r\x2\x2\x9F\r\x3\x2\x2\x2\xA0\xA1\a"+
		"\x13\x2\x2\xA1\xA6\a \x2\x2\xA2\xA3\a\x10\x2\x2\xA3\xA4\x5\x32\x1A\x2"+
		"\xA4\xA5\a\x11\x2\x2\xA5\xA7\x3\x2\x2\x2\xA6\xA2\x3\x2\x2\x2\xA6\xA7\x3"+
		"\x2\x2\x2\xA7\xAA\x3\x2\x2\x2\xA8\xA9\a\x12\x2\x2\xA9\xAB\x5\x14\v\x2"+
		"\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAD\a"+
		"\f\x2\x2\xAD\xAE\x5\x18\r\x2\xAE\xAF\a\r\x2\x2\xAF\xF\x3\x2\x2\x2\xB0"+
		"\xB1\a\x14\x2\x2\xB1\xB6\a \x2\x2\xB2\xB3\a\x10\x2\x2\xB3\xB4\x5\x32\x1A"+
		"\x2\xB4\xB5\a\x11\x2\x2\xB5\xB7\x3\x2\x2\x2\xB6\xB2\x3\x2\x2\x2\xB6\xB7"+
		"\x3\x2\x2\x2\xB7\xBA\x3\x2\x2\x2\xB8\xB9\a\x12\x2\x2\xB9\xBB\x5\x14\v"+
		"\x2\xBA\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBD"+
		"\a\f\x2\x2\xBD\xBE\x5\x1A\xE\x2\xBE\xBF\a\r\x2\x2\xBF\x11\x3\x2\x2\x2"+
		"\xC0\xC1\a\x15\x2\x2\xC1\xC2\a \x2\x2\xC2\xC3\a\f\x2\x2\xC3\xC4\x5\x1C"+
		"\xF\x2\xC4\xC5\a\r\x2\x2\xC5\x13\x3\x2\x2\x2\xC6\xC7\a\t\x2\x2\xC7\xCC"+
		"\x5.\x18\x2\xC8\xC9\a\x16\x2\x2\xC9\xCB\x5.\x18\x2\xCA\xC8\x3\x2\x2\x2"+
		"\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\x15\x3"+
		"\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD1\x5\x1E\x10\x2\xD0\xCF\x3\x2\x2\x2"+
		"\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\x17\x3"+
		"\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD7\x5 \x11\x2\xD6\xD5\x3\x2\x2\x2\xD7"+
		"\xDA\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\x19\x3\x2"+
		"\x2\x2\xDA\xD8\x3\x2\x2\x2\xDB\xDD\x5\"\x12\x2\xDC\xDB\x3\x2\x2\x2\xDD"+
		"\xE0\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\x1B\x3\x2"+
		"\x2\x2\xE0\xDE\x3\x2\x2\x2\xE1\xE6\x5*\x16\x2\xE2\xE3\a\x16\x2\x2\xE3"+
		"\xE5\x5*\x16\x2\xE4\xE2\x3\x2\x2\x2\xE5\xE8\x3\x2\x2\x2\xE6\xE4\x3\x2"+
		"\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\x1D\x3\x2\x2\x2\xE8\xE6\x3\x2\x2\x2\xE9"+
		"\xEC\x5$\x13\x2\xEA\xEC\x5(\x15\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEA\x3\x2\x2"+
		"\x2\xEC\x1F\x3\x2\x2\x2\xED\xEE\x5$\x13\x2\xEE!\x3\x2\x2\x2\xEF\xF2\x5"+
		"$\x13\x2\xF0\xF2\x5(\x15\x2\xF1\xEF\x3\x2\x2\x2\xF1\xF0\x3\x2\x2\x2\xF2"+
		"#\x3\x2\x2\x2\xF3\xF5\x5&\x14\x2\xF4\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2"+
		"\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF7\x5,\x17\x2\xF7\xF8\a \x2\x2\xF8\xFA\a"+
		"\x17\x2\x2\xF9\xFB\x5\x34\x1B\x2\xFA\xF9\x3\x2\x2\x2\xFA\xFB\x3\x2\x2"+
		"\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFD\a\x18\x2\x2\xFD\xFE\x5\x38\x1D\x2\xFE"+
		"%\x3\x2\x2\x2\xFF\x100\a\x6\x2\x2\x100\'\x3\x2\x2\x2\x101\x102\x5.\x18"+
		"\x2\x102\x105\a \x2\x2\x103\x104\a\x19\x2\x2\x104\x106\x5\x42\"\x2\x105"+
		"\x103\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x108"+
		"\a\x5\x2\x2\x108)\x3\x2\x2\x2\x109\x10C\a \x2\x2\x10A\x10B\a\x19\x2\x2"+
		"\x10B\x10D\x5\x42\"\x2\x10C\x10A\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D"+
		"+\x3\x2\x2\x2\x10E\x111\x5.\x18\x2\x10F\x111\a\x1A\x2\x2\x110\x10E\x3"+
		"\x2\x2\x2\x110\x10F\x3\x2\x2\x2\x111-\x3\x2\x2\x2\x112\x113\x5\x30\x19"+
		"\x2\x113/\x3\x2\x2\x2\x114\x119\a \x2\x2\x115\x116\a\x4\x2\x2\x116\x118"+
		"\a \x2\x2\x117\x115\x3\x2\x2\x2\x118\x11B\x3\x2\x2\x2\x119\x117\x3\x2"+
		"\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x31\x3\x2\x2\x2\x11B\x119\x3\x2\x2\x2"+
		"\x11C\x121\a \x2\x2\x11D\x11E\a\x16\x2\x2\x11E\x120\a \x2\x2\x11F\x11D"+
		"\x3\x2\x2\x2\x120\x123\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x121\x122\x3"+
		"\x2\x2\x2\x122\x33\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x124\x129\x5\x36"+
		"\x1C\x2\x125\x126\a\x16\x2\x2\x126\x128\x5\x36\x1C\x2\x127\x125\x3\x2"+
		"\x2\x2\x128\x12B\x3\x2\x2\x2\x129\x127\x3\x2\x2\x2\x129\x12A\x3\x2\x2"+
		"\x2\x12A\x35\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12C\x12D\x5.\x18\x2\x12D"+
		"\x12E\a \x2\x2\x12E\x37\x3\x2\x2\x2\x12F\x133\a\f\x2\x2\x130\x132\x5:"+
		"\x1E\x2\x131\x130\x3\x2\x2\x2\x132\x135\x3\x2\x2\x2\x133\x131\x3\x2\x2"+
		"\x2\x133\x134\x3\x2\x2\x2\x134\x136\x3\x2\x2\x2\x135\x133\x3\x2\x2\x2"+
		"\x136\x137\a\r\x2\x2\x137\x39\x3\x2\x2\x2\x138\x13C\x5<\x1F\x2\x139\x13C"+
		"\x5> \x2\x13A\x13C\x5@!\x2\x13B\x138\x3\x2\x2\x2\x13B\x139\x3\x2\x2\x2"+
		"\x13B\x13A\x3\x2\x2\x2\x13C;\x3\x2\x2\x2\x13D\x13E\x5.\x18\x2\x13E\x141"+
		"\a \x2\x2\x13F\x140\a\x19\x2\x2\x140\x142\x5\x42\"\x2\x141\x13F\x3\x2"+
		"\x2\x2\x141\x142\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x144\a\x5\x2\x2"+
		"\x144=\x3\x2\x2\x2\x145\x146\x5\x42\"\x2\x146\x147\a\x5\x2\x2\x147?\x3"+
		"\x2\x2\x2\x148\x14A\a\x1B\x2\x2\x149\x14B\x5\x42\"\x2\x14A\x149\x3\x2"+
		"\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14D\a\x5\x2\x2"+
		"\x14D\x41\x3\x2\x2\x2\x14E\x14F\x5\x44#\x2\x14F\x43\x3\x2\x2\x2\x150\x151"+
		"\a \x2\x2\x151\x152\a\x19\x2\x2\x152\x155\x5\x42\"\x2\x153\x155\x5\x46"+
		"$\x2\x154\x150\x3\x2\x2\x2\x154\x153\x3\x2\x2\x2\x155\x45\x3\x2\x2\x2"+
		"\x156\x15B\x5H%\x2\x157\x158\t\x2\x2\x2\x158\x15A\x5H%\x2\x159\x157\x3"+
		"\x2\x2\x2\x15A\x15D\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15B\x15C\x3\x2"+
		"\x2\x2\x15CG\x3\x2\x2\x2\x15D\x15B\x3\x2\x2\x2\x15E\x163\x5J&\x2\x15F"+
		"\x160\t\x3\x2\x2\x160\x162\x5J&\x2\x161\x15F\x3\x2\x2\x2\x162\x165\x3"+
		"\x2\x2\x2\x163\x161\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164I\x3\x2\x2\x2"+
		"\x165\x163\x3\x2\x2\x2\x166\x16D\a \x2\x2\x167\x16D\a!\x2\x2\x168\x169"+
		"\a\x17\x2\x2\x169\x16A\x5\x42\"\x2\x16A\x16B\a\x18\x2\x2\x16B\x16D\x3"+
		"\x2\x2\x2\x16C\x166\x3\x2\x2\x2\x16C\x167\x3\x2\x2\x2\x16C\x168\x3\x2"+
		"\x2\x2\x16DK\x3\x2\x2\x2\x16E\x177\a\a\x2\x2\x16F\x174\x5N(\x2\x170\x171"+
		"\a\x16\x2\x2\x171\x173\x5N(\x2\x172\x170\x3\x2\x2\x2\x173\x176\x3\x2\x2"+
		"\x2\x174\x172\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x178\x3\x2\x2\x2"+
		"\x176\x174\x3\x2\x2\x2\x177\x16F\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178"+
		"\x179\x3\x2\x2\x2\x179\x17A\a\n\x2\x2\x17AM\x3\x2\x2\x2\x17B\x180\a \x2"+
		"\x2\x17C\x17D\a\x4\x2\x2\x17D\x17F\a \x2\x2\x17E\x17C\x3\x2\x2\x2\x17F"+
		"\x182\x3\x2\x2\x2\x180\x17E\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x188"+
		"\x3\x2\x2\x2\x182\x180\x3\x2\x2\x2\x183\x185\a\x17\x2\x2\x184\x186\x5"+
		"P)\x2\x185\x184\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2"+
		"\x187\x189\a\x18\x2\x2\x188\x183\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189"+
		"O\x3\x2\x2\x2\x18A\x18F\x5R*\x2\x18B\x18C\a\x16\x2\x2\x18C\x18E\x5R*\x2"+
		"\x18D\x18B\x3\x2\x2\x2\x18E\x191\x3\x2\x2\x2\x18F\x18D\x3\x2\x2\x2\x18F"+
		"\x190\x3\x2\x2\x2\x190Q\x3\x2\x2\x2\x191\x18F\x3\x2\x2\x2\x192\x193\a"+
		" \x2\x2\x193\x194\a\x19\x2\x2\x194\x195\t\x4\x2\x2\x195S\x3\x2\x2\x2."+
		"XZ\x65os\x80\x82\x8B\x8E\x96\x9A\xA6\xAA\xB6\xBA\xCC\xD2\xD8\xDE\xE6\xEB"+
		"\xF1\xF4\xFA\x105\x10C\x110\x119\x121\x129\x133\x13B\x141\x14A\x154\x15B"+
		"\x163\x16C\x174\x177\x180\x185\x188\x18F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AntlrCSharp
